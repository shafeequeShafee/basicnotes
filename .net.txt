
Clean Architecture / layered Architecture
________________________________
User Interface layer
Business logic layer
Data access layer
Data Base

CQRS (COMMAND QUERY RESPONSIBILITY SEGREGATION ) Design pattern
________________________________________________________________

CQRS- segragating query from command
coomand       query
-------       ------
CREATE         READ
UPDATE
DELETE

------------------------------------

entity framework core 
------------------------
database -first approach (datadase nnu model create cheyyum first)
code-first approach (database generated based on the model)


///// steps /////
1) model create cheyukkaa
//add class

// eneee venekil projectil right click cheyth njammak venda packages okkae install cheyyaam
=> manage nuget manager =>Microsoft.entityFrameworkCore.sqlServer



                        =>Microsoft.entityFrameworkCore.Tools

2) To communicate with database we need a special Object called DbContext
//this object used to interact with database
//Data folder create cheyukkaa
// add class

3) we want to register it with dependancy injection container,
agannae athintae instance controlleril kittum

=> programms.cs => athillae changes okkae veruthukkaaa

4)Migrations
//Migrations allow updating the database with the latest changes on the model.

Tools => Nuget Package Manager => package manager console
=== use coomand => Add-Migration createddatabase -o Data/Migrations
                 Add-Migration createddatabase(migration name) -o Data/Migrations(location)

== To undo this action, use=> Remove-Migration.
== ennit  => Update-Database
////// sql express vennam

5)Creating the endpoints(controller)
choose conroller from API =>API Controller Empty
//

///////////////////////////////

repositories use cheythu
add interface in repository folder
add class in repositories

//ath ennit programm.cs il register cheyannam

////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////  MongoDB /////////////////////////////////////

https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-mongo-app?view=aspnetcore-6.0&tabs=visual-studio


STEP1
----------------------------------------------------------------------
In the Package Manager Console window, navigate to the project root. 
Run the following command to install the .NET driver for MongoDB:

=> Install-Package MongoDB.Driver


STEP 2
------------------------------------------------------------------------
CREATING MODEL

using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;

namespace BookStoreApi.Models;

public class Book
{
    [BsonId]
    [BsonRepresentation(BsonType.ObjectId)]
    public string? Id { get; set; }

    [BsonElement("Name")]
    public string BookName { get; set; } = null!;

    public decimal Price { get; set; }

    public string Category { get; set; } = null!;

    public string Author { get; set; } = null!;
}

Required for mapping the Common Language Runtime (CLR) object to the MongoDB collection.

Annotated with [BsonId] to make this property the document's primary key.

Annotated with [BsonRepresentation(BsonType.ObjectId)] to allow passing the parameter
as type string instead of an ObjectId structure. Mongo handles the conversion 
from string to ObjectId.


STEP 3
-------------------------------------------------------------------
Add a configuration model

Add the following database configuration values to appsettings.json:

{
    "BookStoreDatabase": {
        "ConnectionString": "mongodb://localhost:27017",
        "DatabaseName": "BookStore",
        "BooksCollectionName": "Books"
    },
    "Logging": {
        "LogLevel": {
            "Default": "Information",
            "Microsoft.AspNetCore": "Warning"
        }
    },
    "AllowedHosts": "*"
}


STEP 4
------------------------------------------------------------------------
Add a BookStoreDatabaseSettings class to the Models directory with the following code:

namespace BookStoreApi.Models;

public class BookStoreDatabaseSettings
{
    public string ConnectionString { get; set; } = null!;

    public string DatabaseName { get; set; } = null!;

    public string BooksCollectionName { get; set; } = null!;
}


The preceding BookStoreDatabaseSettings class is used to store the appsettings.
json file's BookStoreDatabase property values. The JSON and C# property names are
 named identically to ease the mapping process.

STEP 5
----------------------------------------------------------------------------------------
Add the following highlighted code to Program.cs:

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.Configure<BookStoreDatabaseSettings>(
    builder.Configuration.GetSection("BookStoreDatabase"));



In the preceding code, the configuration instance to which the appsettings.
json file's BookStoreDatabase section binds is registered in the Dependency Injection
 (DI) container. For example, the BookStoreDatabaseSettings object's 
ConnectionString property is populated with the BookStoreDatabase:ConnectionString 
property in appsettings.json.


STEP 6
-----------------------------------------------------------------------------------------
Add a CRUD operations service
Add a BooksService class to the Services directory with the following code:



using BookStoreApi.Models;
using Microsoft.Extensions.Options;
using MongoDB.Driver;

namespace BookStoreApi.Services;

public class BooksService
{
    private readonly IMongoCollection<Book> _booksCollection;

    public BooksService(
        IOptions<BookStoreDatabaseSettings> bookStoreDatabaseSettings)
    {
        var mongoClient = new MongoClient(
            bookStoreDatabaseSettings.Value.ConnectionString);

        var mongoDatabase = mongoClient.GetDatabase(
            bookStoreDatabaseSettings.Value.DatabaseName);

        _booksCollection = mongoDatabase.GetCollection<Book>(
            bookStoreDatabaseSettings.Value.BooksCollectionName);
    }

    public async Task<List<Book>> GetAsync() =>
        await _booksCollection.Find(_ => true).ToListAsync();

    public async Task<Book?> GetAsync(string id) =>
        await _booksCollection.Find(x => x.Id == id).FirstOrDefaultAsync();

    public async Task CreateAsync(Book newBook) =>
        await _booksCollection.InsertOneAsync(newBook);

    public async Task UpdateAsync(string id, Book updatedBook) =>
        await _booksCollection.ReplaceOneAsync(x => x.Id == id, updatedBook);

    public async Task RemoveAsync(string id) =>
        await _booksCollection.DeleteOneAsync(x => x.Id == id);
}


In the preceding code, a BookStoreDatabaseSettings instance is retrieved from DI via 
constructor injection. This technique provides access to the appsettings.
json configuration values that were added in the Add a configuration model section.



STEP 7
----------------------------------------------------------------------------------
Add the following highlighted code to Program.cs:

builder.Services.AddSingleton<BooksService>();


In the preceding code, the BooksService class is registered with DI to support constructor 
injection in consuming classes. The singleton service lifetime is most appropriate 
because BooksService takes a direct dependency on MongoClient. Per the official 
Mongo Client reuse guidelines, MongoClient should be registered in DI 
with a singleton service lifetime.


STEP 8
----------------------------------------------------------------------------------------
Add a controller


using BookStoreApi.Models;
using BookStoreApi.Services;
using Microsoft.AspNetCore.Mvc;

namespace BookStoreApi.Controllers;

[ApiController]
[Route("api/[controller]")]
public class BooksController : ControllerBase
{
    private readonly BooksService _booksService;

    public BooksController(BooksService booksService) =>
        _booksService = booksService;

    [HttpGet]
    public async Task<List<Book>> Get() =>
        await _booksService.GetAsync();

    [HttpGet("{id:length(24)}")]
    public async Task<ActionResult<Book>> Get(string id)
    {
        var book = await _booksService.GetAsync(id);

        if (book is null)
        {
            return NotFound();
        }

        return book;
    }

    [HttpPost]
    public async Task<IActionResult> Post(Book newBook)
    {
        await _booksService.CreateAsync(newBook);

        return CreatedAtAction(nameof(Get), new { id = newBook.Id }, newBook);
    }

    [HttpPut("{id:length(24)}")]
    public async Task<IActionResult> Update(string id, Book updatedBook)
    {
        var book = await _booksService.GetAsync(id);

        if (book is null)
        {
            return NotFound();
        }

        updatedBook.Id = book.Id;

        await _booksService.UpdateAsync(id, updatedBook);

        return NoContent();
    }

    [HttpDelete("{id:length(24)}")]
    public async Task<IActionResult> Delete(string id)
    {
        var book = await _booksService.GetAsync(id);

        if (book is null)
        {
            return NotFound();
        }

        await _booksService.RemoveAsync(id);

        return NoContent();
    }
}


STEP 9
------------------------------------------------------------------------------------------
Test the web API
Build and run the app.


------------------------------------------------


Mapping

collections and frame work











